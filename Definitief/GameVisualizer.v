
//=======================================================
//  This code is generated by Terasic System Builder
//=======================================================

module GameVisualizer(

	//////////// ADC //////////
	inout 		          		ADC_CS_N,
	output		          		ADC_DIN,
	input 		          		ADC_DOUT,
	output		          		ADC_SCLK,

	//////////// Audio //////////
	input 		          		AUD_ADCDAT,
	inout 		          		AUD_ADCLRCK,
	inout 		          		AUD_BCLK,
	output		          		AUD_DACDAT,
	inout 		          		AUD_DACLRCK,
	output		          		AUD_XCK,

	//////////// CLOCK //////////
	input 		          		CLOCK_50,
	input 		          		CLOCK2_50,
	input 		          		CLOCK3_50,
	input 		          		CLOCK4_50,

	//////////// SDRAM //////////
	output		    [12:0]		DRAM_ADDR,
	output		     [1:0]		DRAM_BA,
	output		          		DRAM_CAS_N,
	output		          		DRAM_CKE,
	output		          		DRAM_CLK,
	output		          		DRAM_CS_N,
	inout 		    [15:0]		DRAM_DQ,
	output		          		DRAM_LDQM,
	output		          		DRAM_RAS_N,
	output		          		DRAM_UDQM,
	output		          		DRAM_WE_N,

	//////////// I2C for Audio and Video-In //////////
	output		          		FPGA_I2C_SCLK,
	inout 		          		FPGA_I2C_SDAT,

	//////////// SEG7 //////////
	output		     [6:0]		HEX0,
	output		     [6:0]		HEX1,
	output		     [6:0]		HEX2,
	output		     [6:0]		HEX3,
	output		     [6:0]		HEX4,
	output		     [6:0]		HEX5,

	//////////// IR //////////
	input 		          		IRDA_RXD,
	output		          		IRDA_TXD,

	//////////// KEY //////////
	input 		     [3:0]		KEY,

	//////////// LED //////////
	output		     [9:0]		LEDR,

	//////////// PS2 //////////
	inout 		          		PS2_CLK,
	inout 		          		PS2_CLK2,
	inout 		          		PS2_DAT,
	inout 		          		PS2_DAT2,

	//////////// SW //////////
	input 		     [9:0]		SW,

	//////////// Video-In //////////
	input 		          		TD_CLK27,
	input 		     [7:0]		TD_DATA,
	input 		          		TD_HS,
	output		          		TD_RESET_N,
	input 		          		TD_VS,

	//////////// VGA //////////
	output		     [7:0]		VGA_B,
	output		          		VGA_BLANK_N,
	output		          		VGA_CLK,
	output		     [7:0]		VGA_G,
	output		          		VGA_HS,
	output		     [7:0]		VGA_R,
	output		          		VGA_SYNC_N,
	output		          		VGA_VS
);



//=======================================================
//  REG/WIRE declarations
//=======================================================

	wire clock;
	wire vsync, hsync;
	wire [ 9:0] display_row;
	wire [10:0] display_col;
	reg [7:0] red, green, blue;
	wire visible;


//=======================================================
//  Structural coding
//=======================================================

	assign reset = !KEY[0];
	assign VGA_CLK = clock;
	assign VGA_SYNC_N = 1'b0;
	assign VGA_BLANK_N = hsync & vsync;
	assign VGA_HS = hsync;
	assign VGA_VS = vsync;
	assign VGA_R = red;
	assign VGA_G = green;
	assign VGA_B = blue;
	/*
	assign LEDR[9] = visible;
	assign LEDR[8] = !visible;
	
	assign LEDR[6] = hsync;
	assign LEDR[5] = vsync;
	assign LEDR[4] = 1'b0;
	*/
	//assign LEDR[2] = red[7];
	//assign LEDR[1] = green[7];
	//assign LEDR[0] = blue[7];
	
	vga_controller #( .HOR_FIELD(1279), 
							.HOR_STR_SYNC(1327),
							.HOR_STP_SYNC(1439),
							.HOR_TOTAL(1687),
							.VER_FIELD(1023),
							.VER_STR_SYNC(1024),
							.VER_STP_SYNC(1027),
							.VER_TOTAL(1065))
						
						VGA_CTRL(.clock(clock),
									.reset(reset), 
									.display_col(display_col),
									.display_row(display_row), 
									.visible(visible),
									.hsync(hsync),
									.vsync(vsync));
	
	PLL100MHz pll(.refclk(CLOCK_50),
					  .rst(reset),
					  .outclk_0(clock),
					  .locked());
	
	wire [3:0] memory_out;
	reg  [7:0] address;
	
	//GameMap mem(.clock(clock),.q(memory_out),.address(address));
	
	
	wire [31:0] processor_data_in, processor_data_out;
	wire wren;
	assign wren = 1'b0;
	
	wire [5:0] communication_input, communication_output;
	wire chooseMedium;
	
	wire [5:0] gpio_in, gpio_out;
	assign gpio_in = {GPIO[20],GPIO[18],GPIO[16],GPIO[14],GPIO[12],GPIO[10]};
	assign gpio_out= {GPIO[21],GPIO[19],GPIO[17],GPIO[15],GPIO[13],GPIO[11]};
	
	assign chooseMedium = SW[8];
	
	assign communication_input = (chooseMedium == 1'b1) ? gpio_in : SW[5:0];
	assign communication_output= (chooseMedium == 1'b1) ? gpio_out : LEDR[5:0];
	
   gameVisuals u0 (
        .clk_clk                (clock),                	//           clk.clk
        .gameboardinfo_data_out (processor_data_out), 	// gameboardinfo.data_out
        .gameboardinfo_address  (address),  					//              .address
        .gameboardinfo_data_in  (processor_data_in),  	//              .data_in
        .gameboardinfo_wren     (wren),     					//              .wren
        .reset_reset_n          (KEY[0]),           		//         reset.reset_n
		  //.knoppen_export         ({!KEY[3],!KEY[2],!KEY[1],!KEY[0]}),
		  .communication_input    (communication_input),    // communication.input
        .communication_output   (communication_output),    //
		  .masterslave_ismaster   (SW[9])    //   masterslave.ismaster
    );
	
	/*
    gameVisuals_with_RS_UART u0 (
        .clk_clk                (clock),                //           clk.clk
        .gameboardinfo_data_out (processor_data_out), // gameboardinfo.data_out
        .gameboardinfo_address  (address),  					//              .address
        .gameboardinfo_data_in  (processor_data_in),  //              .data_in
        .gameboardinfo_wren     (wren),     //              .wren
        .reset_reset_n          (KEY[0]),          //         reset.reset_n
        .knoppen_export         ({!KEY[3],!KEY[2],!KEY[1],!KEY[0]}),          //       knoppen.export
		  .external_connection_rxd (GPIO[0]), // external_connection.rxd
        .external_connection_txd (GPIO[1])  //
    );
	*/
	
	//assign LEDR[3:0] = memory_out;
	
	always @(posedge clock)
		if(reset) begin
			red = 0;
			green = 0;
			blue = 0;
			end
		else begin
			if(visible) begin
					address = {display_row[7:4],display_col[7:4]};
					//Assignment 4: Toffe QR codes
					//red =   ({8{display_row[6]}})-({8{display_col[6]}});
					//green = ({8{display_row[7]}})-({8{display_col[7]}});
					//blue =  ({8{display_row[8]}})-({8{display_col[8]}});
					
					/*Assignment 5
					if (SW[0])
						red = display_row[7:0];
					else
						red = 0;
					if (SW[1])
						green = display_row[7:0];
					else
						green = 0;
					if (SW[2])
						blue = display_row[7:0];
					else
						blue = 0;
					*/
					
					red = {processor_data_out[7:0]};
					green = {processor_data_out[7:0]};
					blue = {processor_data_out[7:0]};
					/*
					red = display_row[7:0]-display_col[7:0];
					green = display_row[7:0]-display_col[7:0];
					blue = display_row[7:0]-display_col[7:0];
					*/
				end
			else begin
				red = 0;
				green = 0;
				blue = 0;
				end
			end



endmodule
