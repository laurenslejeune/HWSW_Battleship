
//=======================================================
//  This code is generated by Terasic System Builder
//=======================================================

module UART_test(

	//////////// ADC //////////
	inout 		          		ADC_CS_N,
	output		          		ADC_DIN,
	input 		          		ADC_DOUT,
	output		          		ADC_SCLK,

	//////////// Audio //////////
	input 		          		AUD_ADCDAT,
	inout 		          		AUD_ADCLRCK,
	inout 		          		AUD_BCLK,
	output		          		AUD_DACDAT,
	inout 		          		AUD_DACLRCK,
	output		          		AUD_XCK,

	//////////// CLOCK //////////
	input 		          		CLOCK_50,
	input 		          		CLOCK2_50,
	input 		          		CLOCK3_50,
	input 		          		CLOCK4_50,

	//////////// SDRAM //////////
	output		    [12:0]		DRAM_ADDR,
	output		     [1:0]		DRAM_BA,
	output		          		DRAM_CAS_N,
	output		          		DRAM_CKE,
	output		          		DRAM_CLK,
	output		          		DRAM_CS_N,
	inout 		    [15:0]		DRAM_DQ,
	output		          		DRAM_LDQM,
	output		          		DRAM_RAS_N,
	output		          		DRAM_UDQM,
	output		          		DRAM_WE_N,

	//////////// I2C for Audio and Video-In //////////
	output		          		FPGA_I2C_SCLK,
	inout 		          		FPGA_I2C_SDAT,

	//////////// SEG7 //////////
	output		     [6:0]		HEX0,
	output		     [6:0]		HEX1,
	output		     [6:0]		HEX2,
	output		     [6:0]		HEX3,
	output		     [6:0]		HEX4,
	output		     [6:0]		HEX5,

	//////////// IR //////////
	input 		          		IRDA_RXD,
	output		          		IRDA_TXD,

	//////////// KEY //////////
	input 		     [3:0]		KEY,

	//////////// LED //////////
	output		     [9:0]		LEDR,

	//////////// PS2 //////////
	inout 		          		PS2_CLK,
	inout 		          		PS2_CLK2,
	inout 		          		PS2_DAT,
	inout 		          		PS2_DAT2,

	//////////// SW //////////
	input 		     [9:0]		SW,

	//////////// Video-In //////////
	input 		          		TD_CLK27,
	input 		     [7:0]		TD_DATA,
	input 		          		TD_HS,
	output		          		TD_RESET_N,
	input 		          		TD_VS,

	//////////// VGA //////////
	output		     [7:0]		VGA_B,
	output		          		VGA_BLANK_N,
	output		          		VGA_CLK,
	output		     [7:0]		VGA_G,
	output		          		VGA_HS,
	output		     [7:0]		VGA_R,
	output		          		VGA_SYNC_N,
	output		          		VGA_VS,

	//////////// GPIO_0, GPIO_0 connect to GPIO Default //////////
	inout 		    [35:0]		GPIO
);



//=======================================================
//  REG/WIRE declarations
//=======================================================




//=======================================================
//  Structural coding
//=======================================================

//assign LEDR = SW;

wire RxD, clock;
wire clk_25;
wire [7:0] RxD_data;
wire RxD_data_ready, RxD_endofpacket, RxD_idle;
reg  [7:0] leds;

assign clock = CLOCK_50;
assign RxD = GPIO[1];
assign LEDR[7:0] =  (master_slave) ? transmitted_data : leds;

wire TxD_start;
assign TxD_start = SW[0];


wire master_slave;
assign master_slave = SW[9];

wire reset;
assign reset=!KEY[0];

wire TxD_pin, z;
assign TxD_pin = (master_slave) ? GPIO[3] : z;

reg counter_led;
wire [7:0] transmitted_data;
PLL_25MHz PLL(.refclk(clock),.rst(1'b0),.outclk_0(clk_25));
master_tester master(clk_25, reset, TxD_start, TxD_pin, transmitted_data);
slave_tester slave(clk_25, RxD, RxD_data_ready, RxD_data);
//counter ctr(clk_25, reset, 12500000, tick);

wire [31:0] counter_output;
free_running_counter ctr(clk_25,reset,counter_output);

/*always @(clk_25)
	if (tick)
		counter_led = ~counter_led;
*/
assign LEDR[9] = counter_output[24];
		
always @(posedge clk_25) 
	if(RxD_data_ready && !master_slave) //&& master_slave) 
			leds = RxD_data;


endmodule
